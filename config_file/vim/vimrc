" 我的vim配置
" ~/.vim/vimrc
""""""""""""""""""""""""""""""""""""""""""""
set nocompatible
colorscheme molokai
set backspace=indent,eol,start
set nu
syntax on
set autoindent
set ts=4 sw=4
let mapleader ="`"
set cursorline
"set cursorcolumn
set hlsearch
set incsearch
set gcr=a:block-blinkon0
set t_Co=256 "在securecrt下要有
""""""""""""""""""""""""""""""""""""""""""""
" encoding
let &termencoding=&encoding
set fileencodings=utf-8,ucs-bom,gbk,gb2312,cp936
set termencoding=utf-8
"set fileformats=unix
set encoding=prc
""""""""""""""""""""""""""""""""""""""""""""
" hightlight word under cursor
set updatetime=500
au! CursorMoved * set nohlsearch
au! CursorHold * set hlsearch | let @/='\<'.expand("<cword>").'\>'
set hlsearch
""""""""""""""""""""""""""""""""""""""""""""
" keyboard maping
let mapleader ="`"
map <up> <nop>
map <down> <nop>
map <left> <nop>
map <right> <nop>
""""""""""""""""""""""""""""""""""""""""""""
" For auther title
"自动加作者信息 
"第一部分
"将键盘上的F4功能键映射为添加作者信息的快捷键
map <F4> ms:call TitleDet()<cr>'s
function AddTitle()
	call append(0,"/************************************************")
	call append(1,"*")
	call append(2,"* Author: lucky521 - lucky521@XXX.com")
	call append(3,"*")
	call append(4,"* QQ :	 XXXXXXXX")
	call append(5,"*")
	call append(6,"* Last modified: ".strftime("%Y-%m-%d %H:%M"))
	call append(7,"*")
	call append(8,"* Filename: ".expand("%:t"))
	call append(9,"*")
	call append(10,"************************************************/ ")
	echohl WarningMsg | echo "Successful in adding the copyright." | echohl None
	endfunction
	"此处为预显示的格式
	"第二部分
	"更新最近修改时间和文件名
function UpdateTitle()
	normal m'
	execute '/\S*\sLast modified:/s@:.*$@\=strftime(":\t%Y-%m-%d %H:%M")@'
	normal ''
	normal mk
	execute '/\S*\sFilename:/s@:.*$@\=":\t\t".expand("%:t")@'
	execute "noh"
	normal 'k
	echohl WarningMsg | echo "Successful in updating the copy right." | echohl None
	endfunction
	"第三部分
	"判断前10行代码里面，是否有Last modified这个单词（为更新时间的依据），
	"如果没有的话，代表没有添加过作者信息，需要新添加；
	"如果有的话，那么只需要更新即可
function TitleDet()
	let n=1
	while n < 10
let line = getline(n)
	if line =~ '^.*\sLast\smodified:\S*.*$'
call UpdateTitle()
	return
	endif
	let n = n + 1
	endwhile
call AddTitle()
	endfunction
""""""""""""""""""""""""""""""""""""""""""""""""
" for vundle plugin
filetype off
" set the runtime path to include Vundle and initialize
set rtp+=~/.vim/bundle/Vundle.vim
call vundle#begin()
" alternatively, pass a path where Vundle should install plugins
"call vundle#begin('~/some/path/here')

" let Vundle manage Vundle, required
Plugin 'VundleVim/Vundle.vim'

" The following are examples of different formats supported.
" Keep Plugin commands between vundle#begin/end.
" plugin on GitHub repo
Plugin 'tpope/vim-fugitive'
" plugin from http://vim-scripts.org/vim/scripts.html
"Plugin 'L9'
" Git plugin not hosted on GitHub
"Plugin 'git://git.wincent.com/command-t.git'
" git repos on your local machine (i.e. when working on your own plugin)
"Plugin 'file:///home/gmarik/path/to/plugin'
" The sparkup vim script is in a subdirectory of this repo called vim.
" Pass the path to set the runtimepath properly.
Plugin 'rstacruz/sparkup', {'rtp': 'vim/'}
" Avoid a name conflict with L9
"Plugin 'user/L9', {'name': 'newL9'}

" All of your Plugins must be added before the following line
call vundle#end()            " required
filetype plugin indent on    " required
" To ignore plugin indent changes, instead use:
"filetype plugin on
"
" Brief help
" :PluginList       - lists configured plugins
" :PluginInstall    - installs plugins; append `!` to update or just :PluginUpdate
" :PluginSearch foo - searches for foo; append `!` to refresh local cache
" :PluginClean      - confirms removal of unused plugins; append `!` to auto-approve removal
"
" see :h vundle for more details or wiki for FAQ
" Put your non-Plugin stuff after this line

Bundle 'taglist.vim'
Plugin 'Valloric/YouCompleteMe'
"Bundle 'scrooloose/nerdtree'
"Plugin 'pathogen.vim'
Plugin 'scrooloose/syntastic'
Plugin 'scrooloose/nerdcommenter'
Plugin 'Raimondi/delimitMate'

"""""""""""""""""""""""""""""""""
" ctags  taglist 
let Tlist_Ctags_Cmd = '/usr/bin/ctags'
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 1
set tags=./tags,tags;$HOME
"""""""""""""""""""""""""""""""""
"powerline
python from powerline.vim import setup as powerline_setup
python powerline_setup()
python del powerline_setup
set laststatus=2
set showtabline=2
"""""""""""""""""""""""""""""""""    
" syntastic
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
let g:syntastic_always_populate_loc_list = 1 "load error into location list
let g:syntastic_auto_loc_list = 1
let g:syntastic_check_on_open = 1 "enable syntastic auto check
let g:syntastic_check_on_wq = 0
let g:syntastic_enable_highlighting=1
"let g:syntastic_loc_list_height = 5
"""""""""""""""""""""""""""""""""
" pathogen
"execute pathogen#infect()
""""""""""""""""""""""""""""""""""
" nerdcommenter
let g:NERDSpaceDelims=1
""""""""""""""""""""""""""""""""""
" you complete me
set completeopt=longest,menu
autocmd InsertLeave * if pumvisible() == 0|pclose|endif
inoremap <expr> <CR>       pumvisible() ? "\<C-y>" : "\<CR>"
inoremap <expr> <Down>     pumvisible() ? "\<C-n>" : "\<Down>"
inoremap <expr> <Up>       pumvisible() ? "\<C-p>" : "\<Up>"
inoremap <expr> <PageDown> pumvisible() ? "\<PageDown>\<C-p>\<C-n>" : "\<PageDown>"
inoremap <expr> <PageUp>   pumvisible() ? "\<PageUp>\<C-p>\<C-n>" : "\<PageUp>"
"""""""""""""""""""""""""""""""""""
" cscope
source ~/.vim/bundle/cscope_maps.vim
""""""""""""""""""""""""""""""""""""
" auto update Tags
source ~/.vim/bundle/autotag.vim
""""""""""""""""""""""""""""""""""""
